version: '3.4'

# TODO: upload the images to the registry and use them instead of building them dynamically

services:
    varnish:
        build: ../images/varnish/7.1
        ports:
            - 80
        depends_on:
            - web

    web:
        build: ../images/nginx/1.21
        ports:
            - 80
            - 443
            - 8080
        env_file:
            - env/config.env
        depends_on:
            - fpm
        volumes:
            - appdata:/var/www/html

    fpm:
        build:
            context: ../images/php/7.4-fpm
            target: dev
        ports:
            - 9000
        env_file:
            - env/config.env
            - .env
        depends_on:
            - db
            - elasticsearch
            - maildev
            - rabbitmq
            - redis
        volumes:
            - appdata:/var/www/html

    cli:
        build:
            context: ../images/php/7.4-cli
            target: dev
        env_file:
            - env/composer.env
            - env/config.env
            - .env
        depends_on:
            - db
            - elasticsearch
            - rabbitmq
            - redis
        volumes:
            - appdata:/var/www/html
            - composer-cache:/tmp/cache

    cron:
        build:
            context: ../images/php/7.4-cli
            target: dev
        command: run-cron
        environment:
            CRONTAB: '* * * * * /usr/local/bin/php /var/www/html/bin/magento cron:run >> /var/www/html/var/log/cron.log'
        env_file:
            - env/config.env
            - .env
        depends_on:
            - db
            - elasticsearch
            - rabbitmq
            - redis
        volumes:
            - appdata:/var/www/html

    db:
        image: mariadb:10.4
        ports:
            - 3306
        env_file:
            - env/config.env
        healthcheck:
            test: 'mysqladmin ping -h localhost -pmagento2'
            interval: 30s
            timeout: 30s
            retries: 3
        volumes:
            - dbdata:/var/lib/mysql

    elasticsearch:
        build: ../images/elasticsearch/7.17
        ulimits:
            memlock:
                soft: -1
                hard: -1
        environment:
            - cluster.name=docker-cluster
            - bootstrap.memory_lock=true
        ports:
            - 9200
        volumes:
            - esdata:/usr/share/elasticsearch/data

    redis:
        image: redis:6.2-alpine
        ports:
            - 6379
        sysctls:
            net.core.somaxconn: 1024
        ulimits:
            nproc: 65535
            nofile:
                soft: 20000
                hard: 40000
        healthcheck:
            test: 'redis-cli ping || exit 1'
            interval: 30s
            timeout: 30s
            retries: 3
        volumes:
            - redisdata:/data

    rabbitmq:
        image: rabbitmq:3.8.27-management-alpine
        ports:
            - 15672
            - 5672
        volumes:
            - rabbitmqdata:/var/lib/rabbitmq
        env_file:
            - env/config.env

    maildev:
        image: maildev/maildev:1.1.1
        ports:
            - 1025
            - 1080

volumes:
    appdata:
    composer-cache:
    dbdata:
    esdata:
    rabbitmqdata:
    redisdata:
