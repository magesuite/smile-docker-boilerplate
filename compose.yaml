services:
    varnish:
        image: ${VARNISH_IMAGE}
        depends_on:
            - web
        volumes:
            - ./docker/conf/varnish/default-dev.vcl:/etc/varnish/default.vcl

    web:
        image: ${NGINX_IMAGE}
        depends_on:
            - php
            - php_xdebug
        volumes:
            - ${MAGENTO_DIR}:/var/www/html:rw,cached
            - ./docker/conf/nginx/default-dev.conf:/etc/nginx/conf.d/default.conf

    php:
        image: ${PROJECT_NAME?PROJECT_NAME must be set.}_php
        build:
            context: ./docker/images/php
            args:
                APP_UID: ${DOCKER_UID}
                APP_GID: ${DOCKER_GID}
                PHP_VERSION: ${PHP_VERSION}
        environment:
            COMPOSER_AUTH: ${COMPOSER_AUTH:-}
        depends_on:
            - db
            - elasticsearch
            - maildev
            - rabbitmq
            - redis
        volumes:
            - ${MAGENTO_DIR}:/var/www/html:rw,cached
            - composer:/home/www/.composer
            - npm:/home/www/.npm

    php_xdebug:
        image: ${PROJECT_NAME?PROJECT_NAME must be set.}_php
        environment:
            XDEBUG_MODE: develop,debug
        extra_hosts:
            - "host.docker.internal:host-gateway" # Matches xdebug.client_host
        volumes:
            - ${MAGENTO_DIR}:/var/www/html:rw,cached

    cron:
        image: ${PROJECT_NAME?PROJECT_NAME must be set.}_php
        user: root
        command: run-cron
        environment:
            CRONTAB: '* * * * * php /var/www/html/bin/magento cron:run >> /var/www/html/var/log/cron.log'
        depends_on:
            - db
            - elasticsearch
            - maildev
            - rabbitmq
            - redis
        profiles:
            - cron
        volumes:
            - ${MAGENTO_DIR}:/var/www/html:rw,cached

    db:
        image: ${MYSQL_IMAGE}
        env_file:
            - docker/env/db.env
        healthcheck:
            test: 'mysqladmin ping -h localhost -pmagento2'
            interval: 30s
            timeout: 30s
            retries: 3
        volumes:
            - ./docker/conf/mysql/magento.cnf:/etc/mysql/conf.d/magento.cnf
            - dbdata:/var/lib/mysql

    elasticsearch:
        image: ${ELASTICSEARCH_IMAGE}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        environment:
            - cluster.name=docker-cluster
            - bootstrap.memory_lock=true
        env_file:
            - docker/env/elasticsearch.env
        volumes:
            - esdata:/usr/share/elasticsearch/data

    redis:
        image: ${REDIS_IMAGE}
        healthcheck:
            test: 'redis-cli ping || exit 1'
            interval: 30s
            timeout: 30s
            retries: 3
        volumes:
            - ./docker/conf/redis/redis.conf:/usr/local/etc/redis/redis.conf

    rabbitmq:
        image: ${RABBITMQ_IMAGE}
        hostname: rabbitmq # Ensures data persistence, cf. https://hub.docker.com/_/rabbitmq
        env_file:
            - docker/env/rabbitmq.env
        healthcheck:
            test: 'rabbitmq-diagnostics -q ping'
        volumes:
            - ./docker/conf/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
            - rabbitmqdata:/var/lib/rabbitmq

    maildev:
        image: ${MAILDEV_IMAGE}

volumes:
    appdata:
    composer:
    dbdata:
    esdata:
    npm:
    rabbitmqdata:
