#!/usr/bin/env bash

# Runs the magento installer.

set -e

[ "$DEBUG" = "true" ] && set -x

cd "$( dirname "${BASH_SOURCE[0]}" )"
cd ..

source env/config.env
source bin/deps/utils.sh

if [ ! -f "$MAGENTO_ROOT/composer.json" ]; then
    echo "Please setup the project before running this command."
    exit 1
fi

# Remove env.php and config.php files if it exists, otherwise the installation would fail
rm -f $MAGENTO_ROOT/app/etc/env.php $MAGENTO_ROOT/app/etc/config.php

INSTALL_COMMAND="$MAGENTO_COMMAND setup:install \
    --db-host=$MYSQL_HOST \
    --db-name=$MYSQL_DATABASE \
    --db-user=$MYSQL_USER \
    --db-password=$MYSQL_PASSWORD \
    --elasticsearch-host=$ELASTICSEARCH_HOST \
    --base-url=$BASE_URL \
    --base-url-secure=$SECURE_BASE_URL \
    --use-secure=$USE_SECURE \
    --use-secure-admin=$USE_SECURE_ADMIN \
    --use-rewrites=$USE_REWRITES
    --backend-frontname=$BACKEND_FRONTNAME \
    --admin-firstname=$ADMIN_FIRSTNAME \
    --admin-lastname=$ADMIN_LASTNAME \
    --admin-email=$ADMIN_EMAIL \
    --admin-user=$ADMIN_USER \
    --admin-password=$ADMIN_PASSWORD \
    --language=$LANGUAGE \
    --currency=$CURRENCY \
    --magento-init-params=\"MAGE_MODE=$MAGENTO_RUN_MODE\""

if [ -n "$ENCRYPTION_KEY" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND \
        --key=$ENCRYPTION_KEY"
fi

if [ -n "$CACHE_PREFIX" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND \
        --cache-id-prefix=$CACHE_PREFIX \
        --page-cache-id-prefix=$CACHE_PREFIX"
fi

if [ "$USE_REDIS_CACHE" = "true" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND \
        --cache-backend=redis \
        --cache-backend-redis-server=$REDIS_CACHE_HOST \
        --cache-backend-redis-port=$REDIS_CACHE_PORT \
        --cache-backend-redis-db=$REDIS_CACHE_DB"
fi

if [ "$USE_REDIS_SESSIONS" = "true" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND \
        --session-save=redis \
        --session-save-redis-host=$REDIS_SESSIONS_HOST \
        --session-save-redis-port=$REDIS_SESSIONS_PORT \
        --session-save-redis-db=$REDIS_SESSIONS_DB \
        --session-save-redis-log-level=$REDIS_SESSIONS_LOG_LEVEL"
fi

if [ "$USE_VARNISH" = "true" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND \
        --http-cache-hosts=$HTTP_CACHE_HOSTS"
fi

if [ "$USE_RABBITMQ" = "true" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND \
        --amqp-host=$RABBITMQ_HOST \
        --amqp-port=$RABBITMQ_PORT \
        --amqp-user=$RABBITMQ_DEFAULT_USER \
        --amqp-password=$RABBITMQ_DEFAULT_PASS \
        --amqp-virtualhost=$RABBITMQ_DEFAULT_VHOST"
fi

print_and_run $INSTALL_COMMAND

# Disable two-factor authentication when developer mode is enabled
if [ "$MAGENTO_RUN_MODE" = "developer" ]; then
    echo && print_and_run "$MAGENTO_COMMAND module:disable Magento_TwoFactorAuth"
fi

# Set up Varnish
if [ "$USE_VARNISH" = "true" ]; then
    echo && print_and_run "$MAGENTO_COMMAND config:set --scope=default --scope-code=0 system/full_page_cache/caching_application 2"
    echo && print_and_run "$MAGENTO_COMMAND config:set --scope=default --scope-code=0 system/full_page_cache/varnish/access_list $VARNISH_ACCESS_LIST"
    echo && print_and_run "$MAGENTO_COMMAND config:set --scope=default --scope-code=0 system/full_page_cache/varnish/backend_host $VARNISH_BACKEND_HOST"
    echo && print_and_run "$MAGENTO_COMMAND config:set --scope=default --scope-code=0 system/full_page_cache/varnish/backend_port $VARNISH_BACKEND_PORT"
fi

if [ "$MAGENTO_RUN_MODE" = "production" ]; then
    echo && print_and_run "$MAGENTO_COMMAND setup:di:compile"
    echo && print_and_run "$MAGENTO_COMMAND cache:clean"
    echo && print_and_run "$MAGENTO_COMMAND setup:static-content:deploy -f en_US ${LANGUAGE}"
fi

echo && print_and_run "find $MAGENTO_ROOT/pub -type f -exec chmod 664 {} \;"
print_and_run "find $MAGENTO_ROOT/pub -type d -exec chmod 775 {} \;"
print_and_run "find $MAGENTO_ROOT/generated -type d -exec chmod g+s {} \;"
print_and_run "find $MAGENTO_ROOT/var/composer_home -type f -exec chmod 664 {} \;"

echo
echo "${GREEN}Installation complete.${RESET}"
