#!/usr/bin/env bash

# Initializes the project (prepares env file, runs composer create-project/composer update).
# Usage: PROJECT=myproject VERSION=2.4.4 ./setup
#
# Mandatory variables:
# - PROJECT: project name (becomes optional if PROJECT_NAME is defined in .env). Must use only "a-z0-9-" characters.
# - VERSION: Magento version (must be >= 2.4.0).
#
# Optional variables:
# - EDITION: "community" or "enterprise". Default value: "community".
# - SMILE_PACKAGES: "y" or "n" (whether to install Smile tools/modules). Default value: "y".
# - SMILE_PACKAGIST: "internal" (https://packagist.galaxy.intranet) or "public" (https://packagist.smile.fr).
#   Default value: "public" for Magento cloud projects, "internal" otherwise.

set -e

cd "$( dirname "${BASH_SOURCE:-$0}}" )"
cd ../..

. ./docker/bin/deps/utils.sh

# Validate the project name.
validate_project_name () {
    if [ -z "$1" ]; then
        echo "${RED}You must set the variable \"PROJECT\" (project name).${RESET}"
        return 1
    fi

    if [ "$(echo "$1" | tr -d 'a-z0-9-')" != "" ]; then
        echo "${RED}The project name \"$1\" is not valid. Use only lowercase letters, numbers, and hyphens.${RESET}"
        return 1
    fi

    return 0
}

# Validate the Magento version.
validate_magento_version () {
    if [ -z "$1" ]; then
        echo "${RED}You must set the variable \"VERSION\" (e.g. \"2.4.4\").${RESET}"
        return 1
    fi

    if [[ ! "$1" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
        echo "${RED}The value \"$1\" is not a valid Magento version.${RESET}"
        return 1
    fi

    if [ $(version_compare "$1" "2.4.0") = "<" ]; then
        echo "${RED}The Magento version must be greater or equal to 2.4.0.${RESET}"
        return 1
    elif [ $(version_compare "$1" "2.4.5") != "<" ]; then
        echo "${RED}The Magento version must be lower or equal to 2.4.4.${RESET}"
        return 1
    fi

    return 0
}

# Validate the Magento edition (no validation when Magento sources already exist, because this variable won't be used).
validate_magento_edition () {
    if [ "$CREATE_PROJECT" = "y" ] && [ "$1" != "community" ] && [ "$1" != "enterprise" ]; then
        echo "${RED}The Magento edition must be either \"community\" or \"enterprise\".${RESET}"
        echo && echo "If you want to initialize a Magento cloud project, you must first move your Magento installation to $MAGENTO_DIR, then re-execute this script without specifying the edition variable."
        return 1
    fi

    return 0
}

# Check if Smile network is reachable.
check_intranet_reachable () {
    if [ "$SMILE_PACKAGIST" = "internal" ]; then
        if curl --output /dev/null --head --silent --fail "$SMILE_PACKAGIST_URL"; then
            echo "${GREEN}âœ“ Smile network is reachable.${RESET}"
        else
            echo "${RED}The URL \"$SMILE_PACKAGIST_URL\" is unreachable."
            echo "You need to be connected to the Smile network (e.g. with a VPN) to use the internal packagist repository.${RESET}"
            exit 1
        fi
    fi
}

# Initialize variables required by composer commands.
init_composer_vars () {
    SMILE_PACKAGES_LIST="smile/module-patch=^1.0 smile/module-reconfigure=^5.0 smile/module-varnish=^4.0"
    SMILE_DEV_PACKAGES_LIST="smile/module-debug-toolbar=^5.0 smile-sa/smileanalyser=^8.0"
    [ "$SMILE_PACKAGIST" = "public" ] && SMILE_PACKAGIST_URL="https://packagist.smile.fr" || SMILE_PACKAGIST_URL="https://packagist.galaxy.intranet"
    MAGENTO_PACKAGIST_URL="https://repo.magento.com/"
}

# Display information about the project before running the setup.
display_project_information () {
    echo && echo "${YELLOW}Project summary:${RESET}"
    echo "- Project name: ${BLUE}$PROJECT_NAME${RESET}"
    echo "- Magento directory: ${BLUE}$MAGENTO_DIR${RESET}"
    if [ "$CREATE_PROJECT" = "y" ]; then
        echo "- Magento version: ${BLUE}$MAGENTO_VERSION${RESET}"
        echo "- Magento edition: ${BLUE}$MAGENTO_EDITION${RESET}"
    fi
    echo "- PHP version: ${BLUE}$PHP_VERSION${RESET}"
    echo "- Composer version: ${BLUE}$COMPOSER_VERSION${RESET}"

    if [ "$CREATE_PROJECT" = "n" ]; then
        echo "- Update composer file: ${BLUE}$RUN_COMPOSER${RESET}"
    fi

    if [ "$RUN_COMPOSER" = "y" ]; then
        echo && echo "${YELLOW}Composer actions:${RESET}"

        if [ "$CREATE_PROJECT" = "y" ]; then
            echo "- Run ${BLUE}composer create-project --no-install${RESET}"
        fi

        if [ "$ADD_SMILE_PACKAGIST" = "y" ]; then
            echo "- Add Smile packagist: ${BLUE}$SMILE_PACKAGIST_URL${RESET}"
        fi

        if [ "$ADD_SMILE_PACKAGES" = "y" ]; then
            echo "- Add Smile packages: ${BLUE}$SMILE_PACKAGES_LIST${RESET}"
            echo "- Add Smile dev packages: ${BLUE}$SMILE_DEV_PACKAGES_LIST${RESET}"
        fi

        if [ "$ADD_GRUMPHP" = "y" ]; then
            echo "- Add package ${BLUE}phpro/grumphp-shim${RESET}"
        fi

        if [ "$ADD_DEPLOY_IGNORE" = "y" ]; then
            echo "- Add config ${BLUE}extra.magento-deploy-ignore${RESET}"
        fi

        if [ "$CREATE_PROJECT" = "y" ]; then
            echo "- Run ${BLUE}composer install${RESET}"
        elif [ "$ADD_SMILE_PACKAGES" = "y" ] || [ "$ADD_GRUMPHP" = "y" ]; then
            echo "- Run ${BLUE}composer update${RESET}"
        fi
    fi
}

# Get the composer command to run on the container.
get_composer_command () {
    COMMAND=""
    DIR_OPT=""

    if [ "$CREATE_PROJECT" = "y" ]; then
        TEMP_DIR="/tmp/magento-project"
        DIR_OPT="-d $TEMP_DIR"
        append_command "composer create-project --no-install --no-plugins --repository=$MAGENTO_PACKAGIST_URL magento/project-$MAGENTO_EDITION-edition=$MAGENTO_VERSION $TEMP_DIR"
    fi

    if [ $(version_compare "$MAGENTO_VERSION" "2.4.4") = "<" ] && [ "$COMPOSER_VERSION" -gt 1 ]; then
        append_command "composer config $DIR_OPT allow-plugins.dealerdirect/phpcodesniffer-composer-installer true"
        append_command "composer config $DIR_OPT allow-plugins.laminas/laminas-dependency-plugin true"
        append_command "composer config $DIR_OPT allow-plugins.magento/* true"
    fi

    if [ "$ADD_SMILE_PACKAGIST" = "y" ]; then
        append_command "composer config $DIR_OPT repositories.smile_libraries composer $SMILE_PACKAGIST_URL/libraries/"
        append_command "composer config $DIR_OPT repositories.smile_magento2 composer $SMILE_PACKAGIST_URL/magento2/"
    fi

    if [ "$ADD_SMILE_PACKAGES" = "y" ]; then
        append_command "composer require $DIR_OPT --no-update $SMILE_PACKAGES_LIST"
        append_command "composer require $DIR_OPT --dev --no-update $SMILE_DEV_PACKAGES_LIST"
    fi

    if [ "$ADD_GRUMPHP" = "y" ]; then
        if [ "$COMPOSER_VERSION" -gt 1 ]; then
            append_command "composer config $DIR_OPT allow-plugins.phpro/grumphp-shim true"
        fi
        append_command "composer require $DIR_OPT --dev --no-update phpro/grumphp-shim"
    fi

    if [ "$ADD_DEPLOY_IGNORE" = "y" ]; then
        append_command "composer config $DIR_OPT --json extra.magento-deploy-ignore.magento/magento2-base '[\"/.gitignore\"]'"
    fi

    if [ "$CREATE_PROJECT" = "y" ]; then
        append_command "mv $TEMP_DIR/composer.json . && rm -rf $TEMP_DIR && composer install"
    elif [ "$ADD_SMILE_PACKAGES" = "y" ] || [ "$ADD_GRUMPHP" = "y" ]; then
        append_command "composer update"
    fi

    if [ "$ADD_SMILE_PACKAGES" = "y" ] && [ ! -f "$MAGENTO_DIR/.smileanalyser.yaml" ]; then
        append_command "vendor/bin/SmileAnalyser init --type Magento2"
    fi

    echo $COMMAND
}

# Add instructions to an existing command.
append_command () {
    MESSAGE="Running ${BLUE}$1${RESET}"
    [ "$COMMAND" = "" ] && COMMAND="echo && echo \"$MESSAGE\" && $1" || COMMAND="$COMMAND && echo \"$MESSAGE\" && $1"
}

########
# Step 1 - Validate pre-requisites.
########

if [ ! -f ".env" ]; then
    echo "${RED}The file .env does not exist.${RESET}"
    exit 1
fi

if ! command -v "curl" > /dev/null || ! command -v "sed" > /dev/null || ! command -v "grep" > /dev/null; then
    echo "${RED}This setup requires the following commands to be installed: curl, sed, grep.${RESET}"
    exit 1
fi

########
# Step 2 - Read variables from command-line (PROJECT_NAME, VERSION, EDITION, SMILE_PACKAGES, SMILE_PACKAGIST)
########

# Read .env file (for $PROJECT_NAME and $MAGENTO_DIR)
. ./.env

# Check whether Magento files already exist
[ -f "$MAGENTO_DIR/composer.json" ] && CREATE_PROJECT=n || CREATE_PROJECT=y

# Project name ("PROJECT" in command-line)
PROJECT_NAME="${PROJECT:-$PROJECT_NAME}"
! validate_project_name $PROJECT_NAME && exit 1

# Magento version ("VERSION" in command-line)
MAGENTO_VERSION="$VERSION"
! validate_magento_version $MAGENTO_VERSION && exit 1

# Magento edition ("EDITION" in command-line)
MAGENTO_EDITION="${EDITION:-community}"
! validate_magento_edition $MAGENTO_EDITION && exit 1

# Whether to add Smile packages and packagist ("SMILE_PACKAGES" in command-line)
ADD_SMILE_PACKAGES="${SMILE_PACKAGES:-y}"
[ "$ADD_SMILE_PACKAGES" != "y" ] && [ "$ADD_SMILE_PACKAGES" != "n" ] && echo "${RED}SMILE_PACKAGES must be equal to \"y\" or \"n\".${RESET}." && exit 1

# Smile packagist type (SMILE_PACKAGIST in command-line)
[ "$CREATE_PROJECT" = "n" ] && grep -F -e magento/magento-cloud-metapackage "$MAGENTO_DIR/composer.json" > /dev/null && DEFAULT_SMILE_PACKAGIST=public || DEFAULT_SMILE_PACKAGIST=internal
SMILE_PACKAGIST="${SMILE_PACKAGIST:-$DEFAULT_SMILE_PACKAGIST}"
[ "$SMILE_PACKAGIST" != "internal" ] && [ "$SMILE_PACKAGIST" != "public" ] && echo "${RED}The Smile packagist must be one of \"internal\" (https://packagist.galaxy.intranet) or \"public\" (https://packagist.smile.fr).${RESET}" && exit 1

# Will be compared against PHP_VERSION to check if PHP image must be rebuilt
PHP_VERSION_ENV="$PHP_VERSION"
COMPOSER_VERSION_ENV="$COMPOSER_VERSION"

# PHP and composer versions (deducted from Magento version)
[ $(version_compare "$MAGENTO_VERSION" "2.4.3") = "<" ] && COMPOSER_VERSION=1 || COMPOSER_VERSION=2
[ $(version_compare "$MAGENTO_VERSION" "2.4.4") = "<" ] && PHP_VERSION=7.4 || PHP_VERSION=8.1

########
# Step 3 - If composer.json exists, check if there are modifications to do.
########

[ "$ADD_SMILE_PACKAGES" = "y" ] && ADD_SMILE_PACKAGIST=y || ADD_SMILE_PACKAGIST=n
[ "$COMPOSER_VERSION" -gt 1 ] && ADD_DEPLOY_IGNORE=y || ADD_DEPLOY_IGNORE=n
ADD_GRUMPHP=y
RUN_COMPOSER=y

if [ "$CREATE_PROJECT" = "y" ]; then
    echo "No composer.json file found in $MAGENTO_DIR directory."
    echo "This setup will initialize a new Magento project."
else
    if [ -n "$EDITION" ]; then
        echo "${YELLOW}Your project is already initialized, the edition parameter will be ignored.${RESET}" && echo
    fi

    echo "Magento is already installed in $MAGENTO_DIR."
    echo "This setup will update your project files (e.g. variables in env files)."
    RUN_COMPOSER=n

    # Whether to add Smile packagist repositories
    if [ "$ADD_SMILE_PACKAGIST" = "y" ]; then
        if grep -F -e packagist.galaxy.intranet "$MAGENTO_DIR/composer.json" > /dev/null || grep -F -e packagist.smile.fr "$MAGENTO_DIR/composer.json" > /dev/null; then
            ADD_SMILE_PACKAGIST=n
        else
            RUN_COMPOSER=y
        fi
    fi

    # Whether to add Smile packages (added only if they are all missing)
    if [ "$ADD_SMILE_PACKAGES" = "y" ]; then
        SEARCH_PACKAGES="-e smile/module-debug-toolbar -e smile/module-patch -e smile/module-reconfigure -e smile/module-varnish -e smile-sa/smileanalyser"
        grep -F $SEARCH_PACKAGES "$MAGENTO_DIR/composer.json" > /dev/null && ADD_SMILE_PACKAGES=n || RUN_COMPOSER=y
    fi

    # Whether to add GrumPHP
    if [ "$ADD_GRUMPHP" = "y" ]; then
        grep -F -e phpro/grumphp "$MAGENTO_DIR/composer.json" > /dev/null && ADD_GRUMPHP=n || RUN_COMPOSER=y
    fi

    # Whether to add magento-deploy-ignore
    if [ "$ADD_DEPLOY_IGNORE" = "y" ]; then
        grep -F -e magento-deploy-ignore "$MAGENTO_DIR/composer.json" > /dev/null && ADD_DEPLOY_IGNORE=n || RUN_COMPOSER=y
    fi
fi

########
# Step 4 - Update files.
########

# Project summary
init_composer_vars
display_project_information

# User confirmation
echo && read -p "${YELLOW}Proceed with the above information? [y/n] ${RESET}" RESULT
if [ "$RESULT" != "y" ] && [ "$RESULT" != "Y" ]; then
    echo "${RED}Aborted by user.${RESET}"
    exit 1
fi

# Check if Smile intranet is accessible before modifying anything
if [ "$RUN_COMPOSER" = "y" ]; then
    check_intranet_reachable
fi

# Update env files
echo && echo "Updating project files"
sedi "s/^PROJECT_NAME=.*/PROJECT_NAME=$PROJECT_NAME/" .env.dist
sedi "s/^PROJECT_NAME=.*/PROJECT_NAME=$PROJECT_NAME/" .env
sedi "s/^PHP_VERSION=.*/PHP_VERSION=$PHP_VERSION/" .env.dist
sedi "s/^PHP_VERSION=.*/PHP_VERSION=$PHP_VERSION/" .env
sedi "s/^COMPOSER_VERSION=.*/COMPOSER_VERSION=$COMPOSER_VERSION/" .env.dist
sedi "s/^COMPOSER_VERSION=.*/COMPOSER_VERSION=$COMPOSER_VERSION/" .env
echo "${GREEN}âœ“ Updated \$PROJECT_NAME to \"$PROJECT_NAME\", \$PHP_VERSION to \"$PHP_VERSION\" and \$COMPOSER_VERSION to \"$COMPOSER_VERSION\" in .env and .env.dist.${RESET}"

# Make sure that the Magento root dir already exists (if Docker creates it, it ends up with root ownership)
if [ "$CREATE_PROJECT" = "y" ] && [ ! -d "$MAGENTO_DIR" ]; then
    mkdir -p "$MAGENTO_DIR"
fi

# Copy files to Magento root dir
cp -n docker/templates/magento/* docker/templates/magento/.[!.]* "$MAGENTO_DIR"
sedi "s/{php_ci_version}/$(echo "$PHP_VERSION" | tr -d ".")/" "$MAGENTO_DIR/.gitlab-ci.yml"
sed "s/{project_name}/$PROJECT_NAME/" docker/templates/boilerplate/01-install.md > docs/01-install.md
echo "${GREEN}âœ“ Copied ./docker/templates/boilerplate/01-install.md to ./docs.${RESET}"

# Rename sample files
[ -f "$MAGENTO_DIR/dev/tools/grunt/configs/themes.js" ] && cp -n "$MAGENTO_DIR/dev/tools/grunt/configs/themes.js" "$MAGENTO_DIR/dev/tools/grunt/configs/local-themes.js" || true
[ -f "$MAGENTO_DIR/grunt-config.json.sample" ] && mv -n "$MAGENTO_DIR/grunt-config.json.sample" "$MAGENTO_DIR/grunt-config.json" || true
[ -f "$MAGENTO_DIR/Gruntfile.js.sample" ] && mv -n "$MAGENTO_DIR/Gruntfile.js.sample" "$MAGENTO_DIR/Gruntfile.js" || true
[ -f "$MAGENTO_DIR/package.json.sample" ] && mv -n "$MAGENTO_DIR/package.json.sample" "$MAGENTO_DIR/package.json" || true
echo "${GREEN}âœ“ Copied ./docker/templates/magento/* to $MAGENTO_DIR.${RESET}"

# Rebuild the PHP image if PHP version or composer version was changed
if [ "$PHP_VERSION" != "$PHP_VERSION_ENV" ] || [ "$COMPOSER_VERSION" != "$COMPOSER_VERSION_ENV" ]; then
    echo && echo "${YELLOW}Rebuilding the PHP container."
    $DOCKER_COMPOSE build $PHP_CONTAINER
fi

########
# Step 5 - Run composer.
########

if [ "$RUN_COMPOSER" = "y" ]; then
    if [ "$SMILE_PACKAGIST" = "public" ] && [ "$ADD_SMILE_PACKAGIST" = "y" ]; then
        echo && echo "${YELLOW}WARNING: This script will add the repository \"$SMILE_PACKAGIST_URL\" to composer.json. Composer will ask for access keys."
        echo "If you don't already have them, please ask dirtech@smile.fr to create a packagist account for your project.${RESET}"
    fi

    # Execute the composer command on the container
    if [ "$CREATE_PROJECT" = "y" ]; then
        echo && echo "${YELLOW}Magento will now be initialized with composer.${RESET}"
    else
        echo && echo "${YELLOW}Updating composer.json file.${RESET}"
    fi

    if ! $DOCKER_COMPOSE run --rm --no-deps $PHP_CONTAINER sh -c "$(get_composer_command)"; then
        echo "${RED}Failed to initialize the project, aborting.${RESET}"
        # Remove composer.json on project creation error only if Magento files were not generated
        [ "$CREATE_PROJECT" = "y" ] && [ ! -f "$MAGENTO_DIR/composer.lock" ] && [ ! -d "$MAGENTO_DIR/vendor" ] && rm -f "$MAGENTO_DIR/composer.json"
        exit 1
    fi
fi

echo && echo "${GREEN}The project was successfully initialized.${RESET}"
