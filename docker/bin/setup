#!/usr/bin/env bash

# Initializes the project (prepares env file, runs composer create-project/composer install).

set -e

cd "$( dirname "${BASH_SOURCE:-$0}}" )"
cd ../..

. ./docker/bin/deps/utils.sh

# Check requirements specific to this setup.
check_setup_requirements () {
    STATUS=0

    # Requirements specific to this setup
    if ! command -v "curl"> /dev/null; then
        echo "${RED}Please install the command \"curl\".${RESET}"
        STATUS=1
    fi

    if ! command -v "sed" > /dev/null; then
        echo "${RED}Please install the command \"sed\".${RESET}"
        STATUS=1
    fi

    if ! command -v "grep" > /dev/null; then
        echo "${RED}Please install the command \"grep\".${RESET}"
        STATUS=1
    fi

    if [ "$STATUS" -gt 0 ]; then
        exit $STATUS
    fi
}

# Check if Smile network is reachable.
check_intranet_reachable () {
    if [ "$SMILE_PACKAGIST" = "internal" ]; then
        if curl --output /dev/null --head --silent --fail "$SMILE_PACKAGIST_URL"; then
            echo "${GREEN}âœ“ Smile network is reachable.${RESET}"
        else
            echo "${RED}The URL \"$SMILE_PACKAGIST_URL\" is unreachable."
            echo "You need to be connected to the Smile network (e.g. with a VPN) to use the internal packagist repository.${RESET}"
            exit 1
        fi
    fi
}

# Initialize Smile packagist URLs, PHP version and composer version.
init_vars () {
    init_smile_packagist_url "$SMILE_PACKAGIST"
    [ $(version_compare "$MAGENTO_VERSION" "2.4.3") = "<" ] && COMPOSER_VERSION=1 || COMPOSER_VERSION=2
    [ $(version_compare "$MAGENTO_VERSION" "2.4.4") = "<" ] && PHP_VERSION=7.4 || PHP_VERSION=8.1
}

# Get packagist URLs.
init_smile_packagist_url () {
    if [ "$1" = "internal" ]; then
        SMILE_PACKAGIST_URL="https://packagist.galaxy.intranet"
    else
        SMILE_PACKAGIST_URL="https://packagist.smile.fr"
    fi
}

# Validate the Magento version.
validate_magento_version () {
    if [[ ! "$1" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
        echo "${RED}Please enter a valid version number.${RESET}"
        return 1
    fi

    if [ $(version_compare "$1" "2.4.0") = "<" ]; then
        echo "${RED}The version must be greater or equal to 2.4.0.${RESET}"
        return 1
    elif [ $(version_compare "$1" "2.4.5") != "<" ]; then
        echo "${RED}The version must be lower or equal to 2.4.4.${RESET}"
        return 1
    fi

    return 0
}

# Read project name from user input.
read_project_name () {
    while
        ask_input PROJECT_NAME "Please enter your project name.\n${RESET}Allowed characters: [a-z0-9-]. Do not use capitalized letters, underscores, dots, etc." $PROJECT_NAME
        [ "$(echo "$PROJECT_NAME" | tr -d 'a-z0-9-')" != "" ] && echo "${RED}This project name is not valid. Use only lowercase letters, numbers, and hyphens.${RESET}"
    do true; done
}

# Read Magento version from user input.
read_magento_version () {
    [ "$CREATE_PROJECT" = "y" ] && QUESTION="Magento version:" || QUESTION="What is your current Magento version?"
    while
        ask_input MAGENTO_VERSION "$QUESTION" "$DEFAULT_MAGENTO_VERSION"
        ! validate_magento_version $MAGENTO_VERSION
    do true; done
}

# Read Magento edition from user input.
read_magento_edition () {
    while
        ask_input MAGENTO_EDITION "Magento edition (${BLUE}community${GREEN} or ${BLUE}enterprise${GREEN})${RESET}." "$DEFAULT_MAGENTO_EDITION"
        [ "$MAGENTO_EDITION" != "community" ] && [ "$MAGENTO_EDITION" != "enterprise" ] && echo "${RED}Please choose between \"community\" and \"enterprise\".${RESET}"
    do true; done
}

# Read Smile packagist repository from user input.
read_smile_packagist () {
    QUESTION="Smile packagist repository (${BLUE}internal${GREEN} for https://packagist.galaxy.intranet, or ${BLUE}public${GREEN} for https://packagist.smile.fr).${RESET}"
    if [ "$CREATE_PROJECT" = "n" ]; then
        QUESTION="$QUESTION\nIf this is a Magento cloud project, use the public repository."
    fi

    while
        ask_input SMILE_PACKAGIST "$QUESTION" "$DEFAULT_SMILE_PACKAGIST"
        [ "$SMILE_PACKAGIST" != "internal" ] && [ "$SMILE_PACKAGIST" != "public" ] && echo "${RED}Please choose between \"internal\" and \"public\".${RESET}"
    do true; done

    if [ "$SMILE_PACKAGIST" = "public" ]; then
        echo && echo "${YELLOW}Warning:${RESET} The public packagist https://packagist.smile.fr requires an authenticated user account."
        echo "If you don't already have one, please ask dirtech@smile.fr to create a packagist account for your project."
    fi
}

# Read whether to install Smile modules from user input.
read_add_smile_modules () {
    ask_yes_no ADD_SMILE_MODULES "Please choose whether to install Smile tools (module-debug-toolbar, module-patch, module-reconfigure, module-varnish, smileanalyser)." "$DEFAULT_ADD_SMILE_MODULES"
}

# Prints a summary of the project information.
print_project_summary () {
    echo && echo "${YELLOW}Project summary:${RESET}"
    echo "- Project name: ${BLUE}$PROJECT_NAME${RESET}"
    echo "- Magento directory: ${BLUE}$MAGENTO_DIR${RESET}"
    echo "- PHP version: ${BLUE}$PHP_VERSION${RESET}"

    if [ "$CREATE_PROJECT" = "y" ]; then
        echo "- Magento version: ${BLUE}$MAGENTO_VERSION${RESET}"
        echo "- Magento edition: ${BLUE}$MAGENTO_EDITION${RESET}"
    fi

    if [ "$CREATE_PROJECT" = "y" ] || [ "$ADD_SMILE_PACKAGIST" = "y" ]; then
        echo "- Smile repository URL: ${BLUE}$SMILE_PACKAGIST_URL${RESET}"
    fi

    if [ "$CREATE_PROJECT" = "y" ] || [ "$ADD_SMILE_MODULES" = "y" ]; then
        echo "- Install Smile modules: ${BLUE}$ADD_SMILE_MODULES${RESET}"
    fi
}

# Get the composer create-project command.
get_composer_create_project_cmd () {
    TEMP_DIR="/tmp/magento-project"

    COMMAND="composer create-project --no-install --repository=$MAGENTO_PACKAGIST_URL magento/project-$MAGENTO_EDITION-edition=$MAGENTO_VERSION $TEMP_DIR"

    if [ $(version_compare "$MAGENTO_VERSION" "2.4.4") = "<" ]; then
        COMMAND="$COMMAND && \
            composer config -d $TEMP_DIR allow-plugins.dealerdirect/phpcodesniffer-composer-installer true && \
            composer config -d $TEMP_DIR allow-plugins.laminas/laminas-dependency-plugin true && \
            composer config -d $TEMP_DIR allow-plugins.magento/* true"
    fi

    COMMAND="$COMMAND && composer config -d $TEMP_DIR repositories.smile_libraries composer $SMILE_PACKAGIST_URL/libraries/ && \
        composer config -d $TEMP_DIR repositories.smile_magento2 composer $SMILE_PACKAGIST_URL/magento2/"

    if [ "$ADD_SMILE_MODULES" = "y" ]; then
        COMMAND="$COMMAND && \
            composer require -d $TEMP_DIR --no-update $SMILE_MODULES && \
            composer require -d $TEMP_DIR --dev --no-update $SMILE_DEV_MODULES"
    fi

    # Copy composer.json file to the project directory and run composer install
    COMMAND="$COMMAND && \
        mv $TEMP_DIR/composer.json . && rm -rf $TEMP_DIR && \
        composer install"

    if [ "$ADD_SMILE_MODULES" = "y" ] && [ ! -f ".smileanalyser.yaml" ]; then
        COMMAND="$COMMAND && vendor/bin/SmileAnalyser init --type Magento2"
    fi

    echo $COMMAND
}

# Get the composer command that updates a cloud project.
get_composer_update_command () {
    COMMAND="cp -f .gitignore /tmp"

    if [ "$ADD_SMILE_PACKAGIST" = "y" ]; then
        COMMAND="$COMMAND && \
            composer config repositories.smile_libraries composer $SMILE_PACKAGIST_URL/libraries/ && \
            composer config repositories.smile_magento2 composer $SMILE_PACKAGIST_URL/magento2/"
    fi

    if [ "$ADD_SMILE_MODULES" = "y" ]; then
        COMMAND="$COMMAND &&
            composer require --no-update smile/module-reconfigure smile/module-patch smile/module-varnish && \
            composer require --dev --no-update smile/module-debug-toolbar smile-sa/smileanalyser"
    fi

    COMMAND="$COMMAND && composer update && mv /tmp/.gitignore ."

    if [ "$ADD_SMILE_MODULES" = "y" ] && [ ! -f ".smileanalyser.yaml" ]; then
        COMMAND="$COMMAND && vendor/bin/SmileAnalyser init --type Magento2"
    fi

    echo $COMMAND
}

########
# Step 1 - Validate pre-requisites.
########

# Check project requirements
./docker/bin/check-requirements

# Check requirements specific to this setup
check_setup_requirements

########
# Step 2 - Read environment files.
########

. ./.env

# Default values
DEFAULT_MAGENTO_VERSION=2.4.4
DEFAULT_MAGENTO_EDITION=community
DEFAULT_SMILE_PACKAGIST=internal
DEFAULT_ADD_SMILE_MODULES=y
DEFAULT_MAGENTO_DIR=${MAGENTO_DIR:-./magento}

# Packagist URLs
MAGENTO_PACKAGIST_URL="https://repo.magento.com/"
init_smile_packagist_url "$SMILE_PACKAGIST"

# Modules list
SMILE_MODULES="smile/module-patch=^1.0 smile/module-reconfigure=^5.0 smile/module-varnish=^4.0"
SMILE_DEV_MODULES="smile/module-debug-toolbar=^5.0 smile-sa/smileanalyser=^8.0"

########
# Step 3 - Find Magento sources.
########

[ -f "$MAGENTO_DIR/composer.json" ] && CREATE_PROJECT=n || CREATE_PROJECT=y

if [ "$CREATE_PROJECT" = "y" ]; then
    echo && echo "No composer.json file found in $MAGENTO_DIR directory. This setup will initialize a new Magento project for you."
    echo "${YELLOW}WARNING${RESET}: if you want to set up a Magento cloud project, you must add the existing Magento sources in $MAGENTO_DIR, then restart this setup.${RESET}"
else
    echo && echo "composer.json file found in $MAGENTO_DIR directory."
    echo "Please answer the following questions. The docker env files will be updated with the provided information."
fi

########
# Step 4 - Interactive mode.
########

if [ "$CREATE_PROJECT" = "y" ]; then
    # New Magento project: ask for full project information
    read_project_name
    read_magento_version
    read_magento_edition
    read_smile_packagist
    read_add_smile_modules
    init_vars
    print_project_summary
    ask_yes_no RESULT "Run composer create-project with the above information?"
    RUN_COMPOSER=y
else
    # Existing project: ask only for information required to update env files and composer.json/composer.auth files
    DEFAULT_MAGENTO_VERSION=
    read_project_name
    read_magento_version
    ADD_SMILE_PACKAGIST=n

    if grep -F -e packagist.galaxy.intranet "$MAGENTO_DIR/composer.json" > /dev/null; then
        echo && echo "${GREEN}âœ“ Smile packagist repository is aleady defined in composer.json.${RESET}"
        SMILE_PACKAGIST=internal
    elif grep -F -e packagist.smile.fr "$MAGENTO_DIR/composer.json" > /dev/null; then
        echo && echo "${GREEN}âœ“ Smile packagist repository is already defined in composer.json.${RESET}"
        SMILE_PACKAGIST=public
    else
        ask_yes_no RESULT "${YELLOW}Smile packagist repository is not set in composer.json. Do you want to add it?${RESET}"
        if [ "$RESULT" = "y" ]; then
            read_smile_packagist
            RUN_COMPOSER=y
            ADD_SMILE_PACKAGIST=y
        fi
    fi

    if grep -F -e smile/module-debug-toolbar -e smile/module-patch -e smile/module-reconfigure -e smile/module-varnish -e smile-sa/smileanalyser "$MAGENTO_DIR/composer.json" > /dev/null; then
        echo && echo "${GREEN}âœ“ Smile modules are already defined in composer.json.${RESET}"
        ADD_SMILE_MODULES=n
    else
        ask_yes_no RESULT "${YELLOW}Smile modules are not set in composer.json. Do you want to add them?${RESET}"
        if [ "$RESULT" = "y" ]; then
            ADD_SMILE_MODULES=y
        fi
    fi

    init_vars
    print_project_summary

    [ ! -d "$MAGENTO_DIR/vendor" ] && RUN_COMPOSER=y || RUN_COMPOSER=n

    if [ "$RUN_COMPOSER" = "y" ]; then
        ask_yes_no RESULT "Proceed to update docker env file and update composer.json with the above information?"
    else
        ask_yes_no RESULT "Proceed to update docker env file with the above information?"
    fi
fi

# Ask for confirmation before executing the composer create-project command
[ "$RESULT" != "y" ] && echo "${RED}Aborted by user.${RESET}" && exit

########
# Step 5 - Update environment files.
########

sed -i "s/^PROJECT_NAME=.*/PROJECT_NAME=$PROJECT_NAME/" .env
sed -i "s/^PROJECT_NAME=.*/PROJECT_NAME=$PROJECT_NAME/" .env.dist
sed -i "s/^MAGENTO_DIR=.*/MAGENTO_DIR=${MAGENTO_DIR//\//\\/}/" .env
sed -i "s/^MAGENTO_DIR=.*/MAGENTO_DIR=${MAGENTO_DIR//\//\\/}/" .env.dist
sed -i "s/^PHP_VERSION=.*/PHP_VERSION=$PHP_VERSION/" .env
sed -i "s/^PHP_VERSION=.*/PHP_VERSION=$PHP_VERSION/" .env.dist
echo "${GREEN}âœ“ Updated \$PROJECT_NAME to \"$PROJECT_NAME\", \$MAGENTO_DIR to \"$MAGENTO_DIR\" and \$PHP_VERSION to \"$PHP_VERSION\" in .env and .env.dist.${RESET}"
sed -i "s/^COMPOSER_VERSION=.*/COMPOSER_VERSION=$COMPOSER_VERSION/" docker/env/php.env
echo "${GREEN}âœ“ Updated \$COMPOSER_VERSION to \"$COMPOSER_VERSION\" in docker/env/php.env.${RESET}"

if [ "$CREATE_PROJECT" = "n" ]; then
    ask_yes_no RESULT "Move files in docker/conf/magento to the Magento root directory?" y
    if [ "$RESULT" = "y" ]; then
        cp docker/conf/magento/* "$MAGENTO_DIR"
        cp docker/conf/magento/.gitignore "$MAGENTO_DIR"
        echo "${GREEN}âœ“ Copied docker/magento/* to \"$MAGENTO_DIR\".${RESET}"
    fi
fi

########
# Step 6 - Run composer.
########

if [ "$RUN_COMPOSER" = "y" ]; then
    # Check if Smile network is reachable
    check_intranet_reachable

    # Create project root directory (to make sure it has the correct user permissions)
    if [ "$CREATE_PROJECT" = "y" ] && [ ! -d "$MAGENTO_DIR" ]; then
        mkdir -p "$MAGENTO_DIR"
    fi

    # Execute the composer command on the container
    [ "$CREATE_PROJECT" = "y" ] && COMMAND="$(get_composer_create_project_cmd)" || COMMAND="$(get_composer_update_command)"

    echo && echo "${YELLOW}Magento will now be initialized with composer.${RESET}"
    echo

    if ! docker compose run --rm --no-deps $PHP_CONTAINER sh -c "$COMMAND"; then
        echo "${RED}Failed to initialize the project, aborting.${RESET}"
        # Remove composer.json on project creation error only if Magento files were not generated
        [ "$CREATE_PROJECT" = "y" ] && [ ! -f "$MAGENTO_DIR/composer.lock" ] && [ ! -d "$MAGENTO_DIR/vendor" ] && rm -f "$MAGENTO_DIR/composer.json"
        exit 1
    elif [ "$CREATE_PROJECT" = "y" ]; then
        # Move files in docker/conf/magento to Magento root (already done earlier if CREATE_PROJECT equals n)
        cp docker/conf/magento/* "$MAGENTO_DIR"
        cp docker/conf/magento/.gitignore "$MAGENTO_DIR"
    fi
fi

echo && echo "${GREEN}The project was successfully initialized.${RESET}"
