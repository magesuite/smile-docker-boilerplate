#!/usr/bin/env bash

# Initializes the project (prepares env file, runs composer create-project/composer update).
# Usage: PROJECT=myproject VERSION=2.4.4 ./setup
#
# Mandatory variables:
# - PROJECT             Project name. Must use only "a-z0-9-" characters. Optional if PROJECT_NAME is defined in .env.
# - VERSION             Magento version (must be >= 2.4.0).
#
# Optional variables:
# - EDITION             Magento edition to install ("community", "enterprise" or "cloud"). Default: "community".
#                       Not used if the Magento project is already created.
# - SMILE_PACKAGES      Whether to add Smile tools/modules if not already installed ("y" or "n"). Default: "y".
#                       These packages are: module-debug-toolbar, module-patch, module-reconfigure, smileanalyser
# - SMILE_PACKAGIST     "internal" (https://packagist.galaxy.intranet) or "public" (https://packagist.smile.fr).
#                       Default: "public" for Magento cloud projects, "internal" otherwise.
#                       Not used if "SMILE_PACKAGES" is set to "n".

set -e

cd "$( dirname "${BASH_SOURCE:-$0}}" )"
cd ../..

. ./docker/bin/deps/utils.sh

# Get the project name from the command-line.
init_project_name () {
    PROJECT_NAME="${1:-$PROJECT_NAME}"

    if [ -z "$PROJECT_NAME" ]; then
        echo -e "${RED}You must set the variable \"PROJECT\" (project name).${NC}"
        exit 1
    fi

    if [ "$(echo "$PROJECT_NAME" | tr -d 'a-z0-9-')" != "" ]; then
        echo -e "${RED}The project name \"$PROJECT_NAME\" is not valid. Use only lowercase letters, numbers, and hyphens.${NC}"
        exit 1
    fi
}

# Get the Magento edition from the command-line, or from the composer.json file if it exists.
init_magento_edition () {
    if [ "$CREATE_PROJECT" = "y" ]; then
        MAGENTO_EDITION="${1:-community}"

        if [ "$MAGENTO_EDITION" != "community" ] && [ "$MAGENTO_EDITION" != "enterprise" ] && [ "$MAGENTO_EDITION" != "cloud" ]; then
            echo -e "${RED}The Magento edition must be either \"community\", \"enterprise\" or \"cloud\".${NC}"
            exit 1
        fi
    elif grep -F -e magento/magento-cloud-metapackage "$MAGENTO_DIR/composer.json" > /dev/null; then
        MAGENTO_EDITION="cloud"
    elif grep -F -e magento/product-enterprise-edition "$MAGENTO_DIR/composer.json" > /dev/null; then
        MAGENTO_EDITION="enterprise"
    else
        MAGENTO_EDITION="community"
    fi
}

# Get the Magento version from the command-line.
init_magento_version () {
    MAGENTO_VERSION="$1"

    if [ -z "$MAGENTO_VERSION" ]; then
        echo -e "${RED}You must set the variable \"VERSION\" (e.g. \"2.4.4\").${NC}"
        exit 1
    fi

    if [[ ! "$MAGENTO_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
        echo -e "${RED}The value \"$MAGENTO_VERSION\" is not a valid Magento version.${NC}"
        exit 1
    fi

    if [ $(version_compare "$MAGENTO_VERSION" "2.4.0") = "<" ]; then
        echo -e "${RED}The Magento version must be greater or equal to 2.4.0.${NC}"
        exit 1
    elif [ $(version_compare "$MAGENTO_VERSION" "2.4.5") != "<" ]; then
        echo -e "${RED}The Magento version must be lower or equal to 2.4.4.${NC}"
        exit 1
    fi

    if [ "$MAGENTO_EDITION" = "cloud" ] && echo $MAGENTO_VERSION | grep -; then
        echo -e "${RED}The Magento version \"$MAGENTO_VERSION\" cannot be used for a Magento cloud project. Expected format: \"x.y.z\".${NC}"
        exit 1
    fi
}

# Get whether to install Smile packages from the command-line ("y" or "n").
init_smile_packages () {
    ADD_SMILE_PACKAGES="${1:-y}"

    if [ "$ADD_SMILE_PACKAGES" != "y" ] && [ "$ADD_SMILE_PACKAGES" != "n" ]; then
        echo -e "${RED}SMILE_PACKAGES must be equal to \"y\" or \"n\".${NC}."
        exit 1
    fi
}

# Get the Smile packagist from the command-line ("internal" or "public"). Default value is "public" for cloud projects, "internal" otherwise.
init_smile_packagist () {
    [ "$MAGENTO_EDITION" = "cloud" ] && DEFAULT_SMILE_PACKAGIST=public || DEFAULT_SMILE_PACKAGIST=internal
    SMILE_PACKAGIST="${1:-$DEFAULT_SMILE_PACKAGIST}"

    if [ "$SMILE_PACKAGIST" != "internal" ] && [ "$SMILE_PACKAGIST" != "public" ]; then
        echo -e "${RED}The Smile packagist must be \"internal\" (https://packagist.galaxy.intranet) or \"public\" (https://packagist.smile.fr).${NC}"
        exit 1
    fi
}

# Initialize variables required by composer commands.
init_composer_vars () {
    [ "$ADD_SMILE_PACKAGES" = "n" ] && [ "$ADD_GRUMPHP" = "n" ] && COMPOSER_INVALIDATED=n || COMPOSER_INVALIDATED=y
    SMILE_PACKAGES_LIST="smile/module-patch=^1.0 smile/module-reconfigure=^5.0"
    SMILE_DEV_PACKAGES_LIST="smile/module-debug-toolbar=^5.0 smile-sa/smileanalyser=^8.1"
    [ "$SMILE_PACKAGIST" = "public" ] && SMILE_PACKAGIST_URL="https://packagist.smile.fr" || SMILE_PACKAGIST_URL="https://packagist.galaxy.intranet"
    MAGENTO_PACKAGIST_URL="https://repo.magento.com/"
}

# Display information about the project before running the setup.
display_project_information () {
    echo && echo -e "${YELLOW}Project summary:${NC}"
    echo -e "- Project name: ${BLUE}$PROJECT_NAME${NC}"
    echo -e "- Magento directory: ${BLUE}$MAGENTO_DIR${NC}"
    if [ "$CREATE_PROJECT" = "y" ]; then
        echo -e "- Magento version: ${BLUE}$MAGENTO_VERSION${NC}"
        echo -e "- Magento edition: ${BLUE}$MAGENTO_EDITION${NC}"
    fi
    echo -e "- PHP version: ${BLUE}$PHP_VERSION${NC}"
    echo -e "- Composer version: ${BLUE}$COMPOSER_VERSION${NC}"

    if [ "$CREATE_PROJECT" = "n" ]; then
        echo -e "- Update composer file: ${BLUE}$RUN_COMPOSER${NC}"
    fi

    if [ "$RUN_COMPOSER" = "y" ]; then
        echo && echo -e "${YELLOW}Composer actions:${NC}"

        if [ "$CREATE_PROJECT" = "y" ]; then
            echo -e "- Run ${BLUE}composer create-project --no-install${NC}"
        fi

        if [ "$ADD_SMILE_PACKAGIST" = "y" ]; then
            echo -e "- Add Smile packagist: ${BLUE}$SMILE_PACKAGIST_URL${NC}"
        fi

        if [ "$ADD_SMILE_PACKAGES" = "y" ]; then
            echo -e "- Add Smile packages: ${BLUE}$SMILE_PACKAGES_LIST${NC}"
            echo -e "- Add Smile dev packages: ${BLUE}$SMILE_DEV_PACKAGES_LIST${NC}"
        fi

        if [ "$ADD_GRUMPHP" = "y" ]; then
            echo -e "- Add package ${BLUE}phpro/grumphp-shim${NC}"
        fi

        if [ "$ADD_DEPLOY_IGNORE" = "y" ]; then
            echo -e "- Add config ${BLUE}extra.magento-deploy-ignore${NC}"
        fi

        if [ "$CREATE_PROJECT" = "y" ]; then
            echo -e "- Run ${BLUE}composer install${NC}"
        elif [ "$COMPOSER_INVALIDATED" = "y" ]; then
            echo -e "- Run ${BLUE}composer update${NC}"
        fi
    fi
}

# Check if Smile network is reachable.
check_intranet_reachable () {
    if [ "$RUN_COMPOSER" = "n" ] || [ "$SMILE_PACKAGIST" = "public" ]; then
        return 0
    fi

    if [ "$CREATE_PROJECT" = "n" ] && [ "$COMPOSER_INVALIDATED" = "n" ]; then
        return 0
    fi

    if curl --output /dev/null --head --silent --fail "$SMILE_PACKAGIST_URL"; then
        echo && echo "Checking Smile network"
        echo -e "${GREEN}âœ“ Smile network is reachable.${NC}"
    else
        echo -e "${RED}The URL \"$SMILE_PACKAGIST_URL\" is unreachable."
        echo -e "You need to be connected to the Smile network (e.g. with a VPN) to use the internal packagist repository.${NC}"
        exit 1
    fi
}

# Get the composer command to run on the container.
get_composer_command () {
    # Prevents wildcard character from being expanded (e.g. the "composer show" command injected into compose require might return a package with the "*" constraint)
    COMMAND="set -f"
    DIR_OPT=""
    TEMP_DIR="/tmp/magento-project"

    if [ "$CREATE_PROJECT" = "y" ]; then
        DIR_OPT="-d $TEMP_DIR"
        if [ "$MAGENTO_EDITION" = "cloud" ]; then
            # Clone the Magento cloud repository, then add missing dev packages by scanning the composer.json file of an enterprise project
            TEMP_EE_DIR="/tmp/ee-template"
            append_command "git clone -b $MAGENTO_VERSION --depth 1 https://github.com/magento/magento-cloud.git $TEMP_DIR"
            append_command "rm -rf $TEMP_DIR/.git $TEMP_DIR/composer.lock"
            append_command "composer create-project --no-install --no-plugins --repository=$MAGENTO_PACKAGIST_URL magento/project-enterprise-edition=$MAGENTO_VERSION $TEMP_EE_DIR"
            append_command "composer require $DIR_OPT --dev --no-update \$(composer show -d $TEMP_EE_DIR -s | sed -n '/^requires (dev)$/,/^$/p' | grep -v 'requires (dev)' | xargs echo -n)"
            append_command "rm -rf $TEMP_EE_DIR"
        else
            append_command "composer create-project --no-install --no-plugins --repository=$MAGENTO_PACKAGIST_URL magento/project-$MAGENTO_EDITION-edition=$MAGENTO_VERSION $TEMP_DIR"
        fi
    fi

    if [ $(version_compare "$MAGENTO_VERSION" "2.4.4") = "<" ] && [ "$COMPOSER_VERSION" -gt 1 ]; then
        append_command "composer config $DIR_OPT allow-plugins.dealerdirect/phpcodesniffer-composer-installer true"
        append_command "composer config $DIR_OPT allow-plugins.laminas/laminas-dependency-plugin true"
        append_command "composer config $DIR_OPT allow-plugins.magento/* true"
    fi

    if [ "$ADD_SMILE_PACKAGIST" = "y" ]; then
        append_command "composer config $DIR_OPT repositories.smile_libraries composer $SMILE_PACKAGIST_URL/libraries/"
        append_command "composer config $DIR_OPT repositories.smile_magento2 composer $SMILE_PACKAGIST_URL/magento2/"
    fi

    if [ "$ADD_SMILE_PACKAGES" = "y" ]; then
        append_command "composer require $DIR_OPT --no-update $SMILE_PACKAGES_LIST"
        append_command "composer require $DIR_OPT --dev --no-update $SMILE_DEV_PACKAGES_LIST"
    fi

    if [ "$ADD_GRUMPHP" = "y" ]; then
        if [ "$COMPOSER_VERSION" -gt 1 ]; then
            append_command "composer config $DIR_OPT allow-plugins.phpro/grumphp-shim true"
        fi
        append_command "composer require $DIR_OPT --dev --no-update phpro/grumphp-shim"
    fi

    if [ "$ADD_DEPLOY_IGNORE" = "y" ]; then
        append_command "composer config $DIR_OPT --json extra.magento-deploy-ignore.* '[\"/.gitignore\"]'"
    fi

    if [ "$CREATE_PROJECT" = "y" ]; then
        append_command "mv $TEMP_DIR/composer.json . && rm -rf $TEMP_DIR && composer install"
    elif [ "$COMPOSER_INVALIDATED" = "y" ]; then
        append_command "composer update"
    fi

    if [ "$ADD_SMILE_PACKAGES" = "y" ] && [ ! -f "$MAGENTO_DIR/.smileanalyser.yaml" ]; then
        append_command "vendor/bin/SmileAnalyser init --type Magento2"
    fi

    echo $COMMAND
}

# Add instructions to an existing command.
append_command () {
    COMMAND="$COMMAND && printf \"\nRunning ${BLUE}$1${NC}\n\" && $1"
}

########
# Step 1 - Validate pre-requisites.
########

if [ ! -f ".env" ]; then
    echo -e "${RED}The file .env does not exist.${NC}"
    exit 1
fi

if ! command -v "curl" > /dev/null || ! command -v "sed" > /dev/null || ! command -v "grep" > /dev/null; then
    echo -e "${RED}This setup requires the following commands to be installed: curl, sed, grep.${NC}"
    exit 1
fi

########
# Step 2 - Read variables from command-line (PROJECT_NAME, VERSION, EDITION, SMILE_PACKAGES, SMILE_PACKAGIST)
########

# Read .env file (for $PROJECT_NAME and $MAGENTO_DIR)
. ./.env

# Check whether Magento files already exist
[ -f "$MAGENTO_DIR/composer.json" ] && CREATE_PROJECT=n || CREATE_PROJECT=y

# Initialize command-line arguments
init_project_name "$PROJECT" # Sets PROJECT_NAME
init_magento_edition "$EDITION" # Sets MAGENTO_EDITION
init_magento_version "$VERSION" # Sets MAGENTO_VERSION
init_smile_packages "$SMILE_PACKAGES" # Sets ADD_SMILE_PACKAGES
init_smile_packagist "$SMILE_PACKAGIST" # Sets SMILE_PACKAGIST

# Will be compared against PHP_VERSION to check if PHP image must be rebuilt
PHP_VERSION_ENV="$PHP_VERSION"
COMPOSER_VERSION_ENV="$COMPOSER_VERSION"

# PHP and composer versions (deducted from Magento version)
[ $(version_compare "$MAGENTO_VERSION" "2.4.2") = "<" ] && COMPOSER_VERSION=1 || COMPOSER_VERSION=2
[ $(version_compare "$MAGENTO_VERSION" "2.4.4") = "<" ] && PHP_VERSION=7.4 || PHP_VERSION=8.1

# Composer actions that are not configurable through command-line
[ "$ADD_SMILE_PACKAGES" = "y" ] && ADD_SMILE_PACKAGIST=y || ADD_SMILE_PACKAGIST=n
[ "$COMPOSER_VERSION" -gt 1 ] && ADD_DEPLOY_IGNORE=y || ADD_DEPLOY_IGNORE=n
ADD_GRUMPHP=y

########
# Step 3 - If composer.json exists, check if there are modifications to do.
########

if [ "$CREATE_PROJECT" = "y" ]; then
    echo "No composer.json file found in $MAGENTO_DIR directory."
    echo "This setup will initialize a new Magento project."
    RUN_COMPOSER=y
else
    if [ -n "$EDITION" ]; then
        echo -e "${YELLOW}Your project is already initialized, the edition parameter will be ignored.${NC}" && echo
    fi

    echo "Magento is already installed in $MAGENTO_DIR."
    echo "This setup will update your project files (e.g. variables in env files)."
    RUN_COMPOSER=n

    # Whether to add Smile packagist repositories
    if [ "$ADD_SMILE_PACKAGIST" = "y" ]; then
        if grep -F -e packagist.galaxy.intranet "$MAGENTO_DIR/composer.json" > /dev/null || grep -F -e packagist.smile.fr "$MAGENTO_DIR/composer.json" > /dev/null; then
            ADD_SMILE_PACKAGIST=n
        else
            RUN_COMPOSER=y
        fi
    fi

    # Whether to add Smile packages (added only if they are all missing)
    if [ "$ADD_SMILE_PACKAGES" = "y" ]; then
        SEARCH_PACKAGES="-e smile/module-debug-toolbar -e smile/module-patch -e smile/module-reconfigure -e smile-sa/smileanalyser"
        grep -F $SEARCH_PACKAGES "$MAGENTO_DIR/composer.json" > /dev/null && ADD_SMILE_PACKAGES=n || RUN_COMPOSER=y
    fi

    # Whether to add GrumPHP
    if [ "$ADD_GRUMPHP" = "y" ]; then
        grep -F -e phpro/grumphp "$MAGENTO_DIR/composer.json" > /dev/null && ADD_GRUMPHP=n || RUN_COMPOSER=y
    fi

    # Whether to add magento-deploy-ignore
    if [ "$ADD_DEPLOY_IGNORE" = "y" ]; then
        grep -F -e magento-deploy-ignore "$MAGENTO_DIR/composer.json" > /dev/null && ADD_DEPLOY_IGNORE=n || RUN_COMPOSER=y
    fi
fi

########
# Step 4 - Update files.
########

# Project summary
init_composer_vars
display_project_information

# User confirmation
echo && echo -en "${YELLOW}Proceed with the above information? [y/n] ${NC}"
read RESULT
if [ "$RESULT" != "y" ] && [ "$RESULT" != "Y" ]; then
    echo -e "${RED}Aborted by user.${NC}"
    exit 1
fi

# Check if Smile intranet is accessible before modifying anything
check_intranet_reachable

# Update env files
echo && echo "Updating environment files"
sedi "s/^PROJECT_NAME=.*/PROJECT_NAME=$PROJECT_NAME/" .env.dist
sedi "s/^PROJECT_NAME=.*/PROJECT_NAME=$PROJECT_NAME/" .env
sedi "s/^PHP_VERSION=.*/PHP_VERSION=$PHP_VERSION/" .env.dist
sedi "s/^PHP_VERSION=.*/PHP_VERSION=$PHP_VERSION/" .env
sedi "s/^COMPOSER_VERSION=.*/COMPOSER_VERSION=$COMPOSER_VERSION/" .env.dist
sedi "s/^COMPOSER_VERSION=.*/COMPOSER_VERSION=$COMPOSER_VERSION/" .env
echo -e "${GREEN}âœ“ Updated \$PROJECT_NAME to \"$PROJECT_NAME\", \$PHP_VERSION to \"$PHP_VERSION\" and \$COMPOSER_VERSION to \"$COMPOSER_VERSION\" in .env and .env.dist.${NC}"

# Rebuild the PHP image if PHP version or composer version was changed
if [ "$PHP_VERSION" != "$PHP_VERSION_ENV" ] || [ "$COMPOSER_VERSION" != "$COMPOSER_VERSION_ENV" ]; then
    echo && echo -e "${YELLOW}Rebuilding PHP containers${NC}"
    $DOCKER_COMPOSE build "$PHP_CONTAINER" "$PHP_XDEBUG_CONTAINER" "$CRON_CONTAINER"
fi

# Make sure that the Magento root dir already exists (if Docker creates it, it ends up with root ownership)
if [ "$CREATE_PROJECT" = "y" ] && [ ! -d "$MAGENTO_DIR" ]; then
    mkdir -p "$MAGENTO_DIR"
fi

# Copy grumphp.yaml.dist to Magento root dir (must be copied before composer install is run, otherwise git hook has not the expected contents)
sed -e "s/{{ project_name }}/$PROJECT_NAME/g" -e "s/{{ php_version }}/$PHP_VERSION/g" -e "s/{{ composer_version }}/$COMPOSER_VERSION/g" docker/templates/magento/grumphp.yaml.dist > "$MAGENTO_DIR/grumphp.yaml.dist"

########
# Step 5 - Run composer.
########

if [ "$RUN_COMPOSER" = "y" ]; then
    if [ "$SMILE_PACKAGIST" = "public" ] && [ "$ADD_SMILE_PACKAGIST" = "y" ]; then
        echo && echo -e "${YELLOW}WARNING: This script will add the repository \"$SMILE_PACKAGIST_URL\" to composer.json. Composer will ask for access keys."
        echo -e "If you don't already have them, please ask dirtech@smile.fr to create a packagist account for your project.${NC}"
    fi

    # Execute the composer command on the container
    if [ "$CREATE_PROJECT" = "y" ]; then
        echo && echo -e "${YELLOW}Magento will now be initialized with composer.${NC}"
    else
        echo && echo -e "${YELLOW}Updating composer.json file.${NC}"
    fi

    if ! $DOCKER_COMPOSE run --rm --no-deps $PHP_CONTAINER sh -c "$(get_composer_command)"; then
        echo -e "${RED}Failed to initialize the project, aborting.${NC}"
        # Remove composer.json on project creation error only if Magento files were not generated
        [ "$CREATE_PROJECT" = "y" ] && [ ! -f "$MAGENTO_DIR/composer.lock" ] && [ ! -d "$MAGENTO_DIR/vendor" ] && rm -f "$MAGENTO_DIR/composer.json" "$MAGENTO_DIR/grumphp.yaml.dist"
        exit 1
    fi
fi

# Copy Magento template files
echo && echo "Updating project files"
for FILE in docker/templates/magento/{.[!.]*,*}; do
    sed -e "s/{{ project_name }}/$PROJECT_NAME/g" -e "s/{{ php_version }}/$PHP_VERSION/g" -e "s/{{ composer_version }}/$COMPOSER_VERSION/g" "$FILE" > "$MAGENTO_DIR/$(basename "$FILE")"
done
echo -e "${GREEN}âœ“ Copied ./docker/templates/magento/* to $MAGENTO_DIR.${NC}"

# Copy project installation doc file
sed -e "s/{{ project_name }}/$PROJECT_NAME/g" -e "s/{{ php_version }}/$PHP_VERSION/g" -e "s/{{ composer_version }}/$COMPOSER_VERSION/g" docker/templates/01-install.md > docs/01-install.md
echo -e "${GREEN}âœ“ Copied ./docker/templates/01-install.md to ./docs.${NC}"

# Rename sample files
[ -f "$MAGENTO_DIR/dev/tools/grunt/configs/themes.js" ] && cp -n "$MAGENTO_DIR/dev/tools/grunt/configs/themes.js" "$MAGENTO_DIR/dev/tools/grunt/configs/local-themes.js" || true
[ -f "$MAGENTO_DIR/grunt-config.json.sample" ] && mv -n "$MAGENTO_DIR/grunt-config.json.sample" "$MAGENTO_DIR/grunt-config.json" || true
[ -f "$MAGENTO_DIR/Gruntfile.js.sample" ] && mv -n "$MAGENTO_DIR/Gruntfile.js.sample" "$MAGENTO_DIR/Gruntfile.js" || true
[ -f "$MAGENTO_DIR/package.json.sample" ] && mv -n "$MAGENTO_DIR/package.json.sample" "$MAGENTO_DIR/package.json" || true
echo -e "${GREEN}âœ“ Renamed sample files in Magento root directory.${NC}"

echo && echo -e "${GREEN}The project was successfully initialized.${NC}"
