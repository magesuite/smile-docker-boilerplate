#!/usr/bin/env bash

# Runs the magento installer.
# Usage: ./setup-db
# To reset the database: RESET_DB=1 ./setup-db

set -e

cd "$( dirname "${BASH_SOURCE[0]}" )"
cd ../..

. ./docker/bin/deps/utils.sh

# Print and run a command.
print_and_run () {
    echo -e "Running ${BLUE}$@${NC}"
    eval "$@"
}

# Validate RESET_DB value
if [ -n "$RESET_DB" ] && [ "$RESET_DB" != "0" ] && [ "$RESET_DB" != "1" ]; then
    echo -e "${RED}The variable \"RESET_DB\" must be equal to 0 or 1.${NC}"
    exit 1
fi

# Read env files
. ./.env
. ./docker/env/db.env
. ./docker/env/magento.env
. ./docker/env/rabbitmq.env

# Prepare the install command
MAGENTO_COMMAND="$DOCKER_COMPOSE run --rm $PHP_CONTAINER bin/magento"

INSTALL_COMMAND="$MAGENTO_COMMAND setup:install \
    --db-host=$MYSQL_HOST \
    --db-name=$MYSQL_DATABASE \
    --db-user=$MYSQL_USER \
    --db-password=$MYSQL_PASSWORD \
    --elasticsearch-host=$ELASTICSEARCH_HOST \
    --elasticsearch-port=$ELASTICSEARCH_PORT \
    --base-url=$BASE_URL \
    --base-url-secure=$SECURE_BASE_URL \
    --use-secure=$USE_SECURE \
    --use-secure-admin=$USE_SECURE_ADMIN \
    --use-rewrites=$USE_REWRITES
    --backend-frontname=$BACKEND_FRONTNAME \
    --admin-firstname=$ADMIN_FIRSTNAME \
    --admin-lastname=$ADMIN_LASTNAME \
    --admin-email=$ADMIN_EMAIL \
    --admin-user=$ADMIN_USER \
    --admin-password=$ADMIN_PASSWORD \
    --language=$LANGUAGE \
    --currency=$CURRENCY \
    --magento-init-params=\"MAGE_MODE=$MAGENTO_RUN_MODE\""

if [ -n "$ENCRYPTION_KEY" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND --key=$ENCRYPTION_KEY"
fi

if [ -n "$CACHE_PREFIX" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND --cache-id-prefix=$CACHE_PREFIX --page-cache-id-prefix=$CACHE_PREFIX"
fi

if [ -n "$SEARCH_ENGINE" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND --search-engine=$SEARCH_ENGINE"
fi

if [ "$USE_REDIS_CACHE" = "true" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND \
        --cache-backend=redis \
        --cache-backend-redis-server=$REDIS_CACHE_HOST \
        --cache-backend-redis-port=$REDIS_CACHE_PORT \
        --cache-backend-redis-db=$REDIS_CACHE_DB"
fi

if [ "$USE_REDIS_SESSIONS" = "true" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND \
        --session-save=redis \
        --session-save-redis-host=$REDIS_SESSIONS_HOST \
        --session-save-redis-port=$REDIS_SESSIONS_PORT \
        --session-save-redis-db=$REDIS_SESSIONS_DB \
        --session-save-redis-log-level=$REDIS_SESSIONS_LOG_LEVEL"
fi

if [ "$USE_VARNISH" = "true" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND --http-cache-hosts=$HTTP_CACHE_HOSTS"
fi

if [ "$USE_RABBITMQ" = "true" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND \
        --amqp-host=$RABBITMQ_HOST \
        --amqp-port=$RABBITMQ_PORT \
        --amqp-user=$RABBITMQ_DEFAULT_USER \
        --amqp-password=$RABBITMQ_DEFAULT_PASS \
        --amqp-virtualhost=$RABBITMQ_DEFAULT_VHOST \
        --amqp-ssl=false" # Fixes https://github.com/magento/magento2/issues/35380 (Magento 2.4.4)
fi

if [ "$RESET_DB" = "1" ]; then
    INSTALL_COMMAND="$INSTALL_COMMAND --cleanup-database"
fi

# Wait for the containers to be up and healthy
print_and_run "$DOCKER_COMPOSE up -d --remove-orphans --wait $PHP_CONTAINER"

# Install Magento
print_and_run $INSTALL_COMMAND

# Set run mode
echo && print_and_run "$MAGENTO_COMMAND deploy:mode:set $MAGENTO_RUN_MODE"

# Disable two-factor authentication when developer mode is enabled
if [ "$MAGENTO_RUN_MODE" = "developer" ]; then
    echo && print_and_run "$MAGENTO_COMMAND module:disable Magento_TwoFactorAuth"
fi

# Set up Varnish
if [ "$USE_VARNISH" = "true" ]; then
    echo && print_and_run "$MAGENTO_COMMAND config:set --scope=default --scope-code=0 system/full_page_cache/caching_application 2"
    echo && print_and_run "$MAGENTO_COMMAND config:set --scope=default --scope-code=0 system/full_page_cache/varnish/access_list $VARNISH_ACCESS_LIST"
    echo && print_and_run "$MAGENTO_COMMAND config:set --scope=default --scope-code=0 system/full_page_cache/varnish/backend_host $VARNISH_BACKEND_HOST"
    echo && print_and_run "$MAGENTO_COMMAND config:set --scope=default --scope-code=0 system/full_page_cache/varnish/backend_port $VARNISH_BACKEND_PORT"
fi

if [ "$MAGENTO_RUN_MODE" = "developer" ] && [ -d "$MAGENTO_DIR/vendor/smile/module-debug-toolbar" ]; then
    echo && print_and_run "$MAGENTO_COMMAND config:set smile_debugtoolbar/configuration/enabled 1"
fi

if [ "$MAGENTO_RUN_MODE" = "production" ]; then
    echo && print_and_run "$MAGENTO_COMMAND setup:di:compile"
    echo && print_and_run "$MAGENTO_COMMAND cache:clean"
    echo && print_and_run "$MAGENTO_COMMAND setup:static-content:deploy -f en_US $LANGUAGE"
fi

echo
echo -e "${GREEN}Installation complete.${NC}"
