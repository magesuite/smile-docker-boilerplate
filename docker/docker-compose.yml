version: '3.4'

# TODO: upload the images to the registry and use them instead of building them dynamically

services:
    ssl:
        build: ./images/ssl
        ports:
            - 8443:443
        environment:
            - UPSTREAM_HOST=varnish
            - UPSTREAM_PORT=80
        depends_on:
            - varnish

    varnish:
        build: ./images/varnish/6.5
        ports:
            - 8080:80
        depends_on:
            - web

    web:
        build: ./images/nginx/1.21
        ports:
            - 80
        env_file:
            - env/php.env
        environment:
            - UPSTREAM_HOST=varnish
            - UPSTREAM_PORT=80
        depends_on:
            - fpm
#        volumes:
#            - appdata:/var/www/html

    fpm:
        build: ./images/php/7.4-fpm
        ports:
            - 9000
        env_file:
            - env/php.env
        depends_on:
            - db
            - elasticsearch
            - mailhog
            - rabbitmq
            - redis
#        volumes:
#            - appdata:/var/www/html

    cli:
        build: ./images/php/7.4-cli
        env_file:
            - env/composer.env
            - env/php.env
            - env/magento.env
        depends_on:
            - db
            - elasticsearch
            - rabbitmq
            - redis
#        volumes:
#            - appdata:/var/www/html
            - composer-cache:/composer/cache

    cron:
        build: ./images/php/7.4-cli
        command: run-cron
        environment:
            CRONTAB: '* * * * * www-data /usr/local/bin/php /var/www/html/bin/magento cron:run >> /var/www/html/var/log/cron.log'
        env_file:
            - .env
            - env/php.env
        depends_on:
            - db
            - elasticsearch
            - rabbitmq
            - redis
#        volumes:
#            - appdata:/var/www/html

    db:
        image: mariadb:10.4
        ports:
            - 3306
        environment:
            MYSQL_ROOT_PASSWORD: 'magento2'
            MYSQL_DATABASE: 'magento2'
            MYSQL_USER: 'magento2'
            MYSQL_PASSWORD: 'magento2'
        healthcheck:
            test: 'mysqladmin ping -h localhost -pmagento2'
            interval: 30s
            timeout: 30s
            retries: 3
        volumes:
            - dbdata:/var/lib/mysql

    elasticsearch:
        image: magento/magento-cloud-docker-elasticsearch:7.9-1.3.1
        ulimits:
            memlock:
                soft: -1
                hard: -1
        environment:
            - cluster.name=docker-cluster
            - bootstrap.memory_lock=true
        ports:
            - 9200
        volumes:
            - esdata:/usr/share/elasticsearch/data

    redis:
        image: redis:6.2
        ports:
            - 6379
        sysctls:
            net.core.somaxconn: 1024
        ulimits:
            nproc: 65535
            nofile:
                soft: 20000
                hard: 40000
        healthcheck:
            test: 'redis-cli ping || exit 1'
            interval: 30s
            timeout: 30s
            retries: 3
        volumes:
            - /data

    rabbitmq:
        image: rabbitmq:3.8.27-management-alpine
        ports:
            - '15672:15672'
            - '5672:5672'
        env_file: env/rabbitmq.env
        volumes:
            - rabbitmqdata:/var/lib/rabbitmq

    mailhog:
        image: mailhog/mailhog:latest
        ports:
            - '1025:1025'
            - '8025:8025'

volumes:
    composer-cache:
    dbdata:
    esdata:
    rabbitmqdata:
